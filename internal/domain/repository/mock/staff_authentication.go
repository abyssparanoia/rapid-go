// Code generated by MockGen. DO NOT EDIT.
// Source: staff_authentication.go
//
// Generated by this command:
//
//	mockgen -source=staff_authentication.go -destination=mock/staff_authentication.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/abyssparanoia/rapid-go/internal/domain/model"
	repository "github.com/abyssparanoia/rapid-go/internal/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockStaffAuthentication is a mock of StaffAuthentication interface.
type MockStaffAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockStaffAuthenticationMockRecorder
}

// MockStaffAuthenticationMockRecorder is the mock recorder for MockStaffAuthentication.
type MockStaffAuthenticationMockRecorder struct {
	mock *MockStaffAuthentication
}

// NewMockStaffAuthentication creates a new mock instance.
func NewMockStaffAuthentication(ctrl *gomock.Controller) *MockStaffAuthentication {
	mock := &MockStaffAuthentication{ctrl: ctrl}
	mock.recorder = &MockStaffAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaffAuthentication) EXPECT() *MockStaffAuthenticationMockRecorder {
	return m.recorder
}

// CreateCustomToken mocks base method.
func (m *MockStaffAuthentication) CreateCustomToken(ctx context.Context, authUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomToken", ctx, authUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomToken indicates an expected call of CreateCustomToken.
func (mr *MockStaffAuthenticationMockRecorder) CreateCustomToken(ctx, authUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomToken", reflect.TypeOf((*MockStaffAuthentication)(nil).CreateCustomToken), ctx, authUID)
}

// CreateIDToken mocks base method.
func (m *MockStaffAuthentication) CreateIDToken(ctx context.Context, authUID, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIDToken", ctx, authUID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIDToken indicates an expected call of CreateIDToken.
func (mr *MockStaffAuthenticationMockRecorder) CreateIDToken(ctx, authUID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIDToken", reflect.TypeOf((*MockStaffAuthentication)(nil).CreateIDToken), ctx, authUID, password)
}

// CreateUser mocks base method.
func (m *MockStaffAuthentication) CreateUser(ctx context.Context, param repository.StaffAuthenticationCreateUserParam) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStaffAuthenticationMockRecorder) CreateUser(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStaffAuthentication)(nil).CreateUser), ctx, param)
}

// GetUserByEmail mocks base method.
func (m *MockStaffAuthentication) GetUserByEmail(ctx context.Context, email string) (*repository.StaffAuthenticationGetUserByEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*repository.StaffAuthenticationGetUserByEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStaffAuthenticationMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStaffAuthentication)(nil).GetUserByEmail), ctx, email)
}

// StoreClaims mocks base method.
func (m *MockStaffAuthentication) StoreClaims(ctx context.Context, authUID string, staffClaims *model.StaffClaims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClaims", ctx, authUID, staffClaims)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClaims indicates an expected call of StoreClaims.
func (mr *MockStaffAuthenticationMockRecorder) StoreClaims(ctx, authUID, staffClaims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClaims", reflect.TypeOf((*MockStaffAuthentication)(nil).StoreClaims), ctx, authUID, staffClaims)
}

// VerifyIDToken mocks base method.
func (m *MockStaffAuthentication) VerifyIDToken(ctx context.Context, idToken string) (*model.StaffClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*model.StaffClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockStaffAuthenticationMockRecorder) VerifyIDToken(ctx, idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockStaffAuthentication)(nil).VerifyIDToken), ctx, idToken)
}
