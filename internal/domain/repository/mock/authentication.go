// Code generated by MockGen. DO NOT EDIT.
// Source: authentication.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/abyssparanoia/rapid-go/internal/domain/model"
	repository "github.com/abyssparanoia/rapid-go/internal/domain/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// CreateCustomToken mocks base method.
func (m *MockAuthentication) CreateCustomToken(ctx context.Context, authUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomToken", ctx, authUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomToken indicates an expected call of CreateCustomToken.
func (mr *MockAuthenticationMockRecorder) CreateCustomToken(ctx, authUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomToken", reflect.TypeOf((*MockAuthentication)(nil).CreateCustomToken), ctx, authUID)
}

// CreateIDToken mocks base method.
func (m *MockAuthentication) CreateIDToken(ctx context.Context, authUID, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIDToken", ctx, authUID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIDToken indicates an expected call of CreateIDToken.
func (mr *MockAuthenticationMockRecorder) CreateIDToken(ctx, authUID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIDToken", reflect.TypeOf((*MockAuthentication)(nil).CreateIDToken), ctx, authUID, password)
}

// CreateUser mocks base method.
func (m *MockAuthentication) CreateUser(ctx context.Context, param repository.AuthenticationCreateUserParam) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthenticationMockRecorder) CreateUser(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthentication)(nil).CreateUser), ctx, param)
}

// GetUserByEmail mocks base method.
func (m *MockAuthentication) GetUserByEmail(ctx context.Context, email string) (*repository.AuthenticationGetUserByEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*repository.AuthenticationGetUserByEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthenticationMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthentication)(nil).GetUserByEmail), ctx, email)
}

// StoreClaims mocks base method.
func (m *MockAuthentication) StoreClaims(ctx context.Context, authUID string, claims *model.Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClaims", ctx, authUID, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClaims indicates an expected call of StoreClaims.
func (mr *MockAuthenticationMockRecorder) StoreClaims(ctx, authUID, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClaims", reflect.TypeOf((*MockAuthentication)(nil).StoreClaims), ctx, authUID, claims)
}

// VerifyIDToken mocks base method.
func (m *MockAuthentication) VerifyIDToken(ctx context.Context, idToken string) (*model.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*model.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockAuthenticationMockRecorder) VerifyIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockAuthentication)(nil).VerifyIDToken), ctx, idToken)
}
