// Code generated by MockGen. DO NOT EDIT.
// Source: transactable.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactable is a mock of Transactable interface.
type MockTransactable struct {
	ctrl     *gomock.Controller
	recorder *MockTransactableMockRecorder
}

// MockTransactableMockRecorder is the mock recorder for MockTransactable.
type MockTransactableMockRecorder struct {
	mock *MockTransactable
}

// NewMockTransactable creates a new mock instance.
func NewMockTransactable(ctrl *gomock.Controller) *MockTransactable {
	mock := &MockTransactable{ctrl: ctrl}
	mock.recorder = &MockTransactableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactable) EXPECT() *MockTransactableMockRecorder {
	return m.recorder
}

// ROTx mocks base method.
func (m *MockTransactable) ROTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ROTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ROTx indicates an expected call of ROTx.
func (mr *MockTransactableMockRecorder) ROTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ROTx", reflect.TypeOf((*MockTransactable)(nil).ROTx), ctx, fn)
}

// RWTx mocks base method.
func (m *MockTransactable) RWTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RWTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RWTx indicates an expected call of RWTx.
func (mr *MockTransactableMockRecorder) RWTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RWTx", reflect.TypeOf((*MockTransactable)(nil).RWTx), ctx, fn)
}
