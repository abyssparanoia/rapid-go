// Code generated by yo. DO NOT EDIT.
// Package dbmodel contains the types.
package dbmodel

import (
	"context"
	"fmt"
	"strings"

	"cloud.google.com/go/spanner"
)

// StaffRole represents a row from 'StaffRoles'.
type StaffRole struct {
	StaffRoleID string `spanner:"StaffRoleID" json:"StaffRoleID"` // StaffRoleID
}

type StaffRoleSlice []*StaffRole

func StaffRolePrimaryKeys() []string {
	return []string{
		"StaffRoleID",
	}
}

func StaffRoleColumns() []string {
	return []string{
		"StaffRoleID",
	}
}

func StaffRoleWritableColumns() []string {
	return []string{
		"StaffRoleID",
	}
}

func (sr *StaffRole) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "StaffRoleID":
			ret = append(ret, &sr.StaffRoleID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (sr *StaffRole) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "StaffRoleID":
			ret = append(ret, sr.StaffRoleID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newStaffRole_Decoder returns a decoder which reads a row from *spanner.Row
// into StaffRole. The decoder is not goroutine-safe. Don't use it concurrently.
func newStaffRole_Decoder(cols []string) func(*spanner.Row) (*StaffRole, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*StaffRole, error) {
		var sr StaffRole
		ptrs, err := sr.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &sr, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (sr *StaffRole) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := sr.columnsToValues(StaffRoleWritableColumns())
	return spanner.Insert("StaffRoles", StaffRoleWritableColumns(), values)
}

func (sr *StaffRole) InsertDML(ctx context.Context) error {
	spannerTransaction := GetSpannerTransaction(ctx)
	params := make(map[string]interface{})
	params[fmt.Sprintf("StaffRoleID")] = sr.StaffRoleID

	values := []string{
		fmt.Sprintf("@StaffRoleID"),
	}
	rowValue := fmt.Sprintf("(%s)", strings.Join(values, ","))

	sql := fmt.Sprintf(`
    INSERT INTO $table
        (StaffRoleID)
    VALUES
        %s
    `, rowValue)

	err := spannerTransaction.ExecContext(ctx, sql, params)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the StaffRole from the database.
func (sr *StaffRole) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := sr.columnsToValues(StaffRolePrimaryKeys())
	return spanner.Delete("StaffRoles", spanner.Key(values))
}
