// Code generated by yo. DO NOT EDIT.
// Package dbmodel contains the types.
package dbmodel

import (
	"context"
	"fmt"
	"strings"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Tenant represents a row from 'Tenants'.
type Tenant struct {
	TenantID  string    `spanner:"TenantID" json:"TenantID"`   // TenantID
	Name      string    `spanner:"Name" json:"Name"`           // Name
	CreatedAt time.Time `spanner:"CreatedAt" json:"CreatedAt"` // CreatedAt
	UpdatedAt time.Time `spanner:"UpdatedAt" json:"UpdatedAt"` // UpdatedAt
}

type TenantSlice []*Tenant

func TenantPrimaryKeys() []string {
	return []string{
		"TenantID",
	}
}

func TenantColumns() []string {
	return []string{
		"TenantID",
		"Name",
		"CreatedAt",
		"UpdatedAt",
	}
}

func TenantWritableColumns() []string {
	return []string{
		"TenantID",
		"Name",
		"CreatedAt",
		"UpdatedAt",
	}
}

func (t *Tenant) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "TenantID":
			ret = append(ret, &t.TenantID)
		case "Name":
			ret = append(ret, &t.Name)
		case "CreatedAt":
			ret = append(ret, &t.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, &t.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Tenant) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "TenantID":
			ret = append(ret, t.TenantID)
		case "Name":
			ret = append(ret, t.Name)
		case "CreatedAt":
			ret = append(ret, t.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, t.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTenant_Decoder returns a decoder which reads a row from *spanner.Row
// into Tenant. The decoder is not goroutine-safe. Don't use it concurrently.
func newTenant_Decoder(cols []string) func(*spanner.Row) (*Tenant, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Tenant, error) {
		var t Tenant
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

func (t *Tenant) Insert(ctx context.Context) error {
	params := make(map[string]interface{})
	params[fmt.Sprintf("TenantID")] = t.TenantID
	params[fmt.Sprintf("Name")] = t.Name
	params[fmt.Sprintf("CreatedAt")] = t.CreatedAt
	params[fmt.Sprintf("UpdatedAt")] = t.UpdatedAt

	values := []string{
		fmt.Sprintf("@TenantID"),
		fmt.Sprintf("@Name"),
		fmt.Sprintf("@CreatedAt"),
		fmt.Sprintf("@UpdatedAt"),
	}
	rowValue := fmt.Sprintf("(%s)", strings.Join(values, ","))

	sql := fmt.Sprintf(`
    INSERT INTO Tenants
        (TenantID, Name, CreatedAt, UpdatedAt)
    VALUES
        %s
    `, rowValue)

	err := GetSpannerTransaction(ctx).ExecContext(ctx, sql, params)
	if err != nil {
		return err
	}

	return nil
}

func (tSlice TenantSlice) InsertAll(ctx context.Context) error {
	if len(tSlice) == 0 {
		return nil
	}

	params := make(map[string]interface{})
	valueStmts := make([]string, 0, len(tSlice))
	for i, m := range tSlice {
		params[fmt.Sprintf("TenantID%d", i)] = m.TenantID
		params[fmt.Sprintf("Name%d", i)] = m.Name
		params[fmt.Sprintf("CreatedAt%d", i)] = m.CreatedAt
		params[fmt.Sprintf("UpdatedAt%d", i)] = m.UpdatedAt

		values := []string{
			fmt.Sprintf("@TenantID%d", i),
			fmt.Sprintf("@Name%d", i),
			fmt.Sprintf("@CreatedAt%d", i),
			fmt.Sprintf("@UpdatedAt%d", i),
		}
		rowValue := fmt.Sprintf("(%s)", strings.Join(values, ","))
		valueStmts = append(valueStmts, rowValue)
	}

	sql := fmt.Sprintf(`
    INSERT INTO Tenants
        (TenantID, Name, CreatedAt, UpdatedAt)
    VALUES
        %s
    `, strings.Join(valueStmts, ","))

	err := GetSpannerTransaction(ctx).ExecContext(ctx, sql, params)
	if err != nil {
		return err
	}

	return nil
}

func (t *Tenant) Update(ctx context.Context) error {
	updateColumns := []string{}

	updateColumns = append(updateColumns, "Name = @param_Name")
	updateColumns = append(updateColumns, "CreatedAt = @param_CreatedAt")
	updateColumns = append(updateColumns, "UpdatedAt = @param_UpdatedAt")

	sql := fmt.Sprintf(`
	UPDATE Tenants
	SET
		%s
    WHERE
            TenantID = @update_params0
	`, strings.Join(updateColumns, ","))

	setParams := map[string]interface{}{

		"param_Name":      t.Name,
		"param_CreatedAt": t.CreatedAt,
		"param_UpdatedAt": t.UpdatedAt,
	}

	whereParams := map[string]interface{}{
		"update_params0": t.TenantID,
	}

	params := make(map[string]interface{})
	for key, value := range setParams {
		params[key] = value
	}
	for key, value := range whereParams {
		params[key] = value
	}

	err := GetSpannerTransaction(ctx).ExecContext(ctx, sql, params)
	if err != nil {
		return err
	}

	return nil
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Tenant) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TenantWritableColumns())
	return spanner.InsertOrUpdate("Tenants", TenantWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Tenant) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TenantPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Tenant.UpdateColumns", "Tenants", err)
	}

	return spanner.Update("Tenants", colsWithPKeys, values), nil
}

// FindTenant gets a Tenant by primary key
func FindTenant(ctx context.Context, db YORODB, tenantID string) (*Tenant, error) {
	key := spanner.Key{tenantID}
	row, err := db.ReadRow(ctx, "Tenants", key, TenantColumns())
	if err != nil {
		return nil, newError("FindTenant", "Tenants", err)
	}

	decoder := newTenant_Decoder(TenantColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTenant", "Tenants", err)
	}

	return t, nil
}

// ReadTenant retrieves multiples rows from Tenant by KeySet as a slice.
func ReadTenant(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Tenant, error) {
	var res []*Tenant

	decoder := newTenant_Decoder(TenantColumns())

	rows := db.Read(ctx, "Tenants", keys, TenantColumns())
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTenant", "Tenants", err)
	}

	return res, nil
}

// Delete deletes the Tenant from the database.
func (t *Tenant) Delete(ctx context.Context) error {
	sql := fmt.Sprintf(`
        	DELETE FROM Tenants
        	WHERE
        	    %s
        	`,
		fmt.Sprintf("(TenantID = @param0)"),
	)

	params := map[string]interface{}{
		"param0": t.TenantID,
	}

	if err := GetSpannerTransaction(ctx).ExecContext(ctx, sql, params); err != nil {
		return err
	}
	return nil
}
