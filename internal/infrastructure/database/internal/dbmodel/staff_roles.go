// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StaffRole is an object representing the database table.
type StaffRole struct {
	// id
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *staffRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffRoleColumns = struct {
	ID string
}{
	ID: "id",
}

var StaffRoleTableColumns = struct {
	ID string
}{
	ID: "staff_roles.id",
}

// Generated where

var StaffRoleWhere = struct {
	ID whereHelperstring
}{
	ID: whereHelperstring{field: "`staff_roles`.`id`"},
}

// StaffRoleRels is where relationship names are stored.
var StaffRoleRels = struct {
	RoleStaffs string
}{
	RoleStaffs: "RoleStaffs",
}

// staffRoleR is where relationships are stored.
type staffRoleR struct {
	RoleStaffs StaffSlice `boil:"RoleStaffs" json:"RoleStaffs" toml:"RoleStaffs" yaml:"RoleStaffs"`
}

// NewStruct creates a new relationship struct
func (*staffRoleR) NewStruct() *staffRoleR {
	return &staffRoleR{}
}

func (o *StaffRole) GetRoleStaffs() StaffSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRoleStaffs()
}

func (r *staffRoleR) GetRoleStaffs() StaffSlice {
	if r == nil {
		return nil
	}

	return r.RoleStaffs
}

// staffRoleL is where Load methods for each relationship are stored.
type staffRoleL struct{}

var (
	staffRoleAllColumns            = []string{"id"}
	staffRoleColumnsWithoutDefault = []string{"id"}
	staffRoleColumnsWithDefault    = []string{}
	staffRolePrimaryKeyColumns     = []string{"id"}
	staffRoleGeneratedColumns      = []string{}
)

type (
	// StaffRoleSlice is an alias for a slice of pointers to StaffRole.
	// This should almost always be used instead of []StaffRole.
	StaffRoleSlice []*StaffRole

	staffRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffRoleType                 = reflect.TypeOf(&StaffRole{})
	staffRoleMapping              = queries.MakeStructMapping(staffRoleType)
	staffRolePrimaryKeyMapping, _ = queries.BindMapping(staffRoleType, staffRoleMapping, staffRolePrimaryKeyColumns)
	staffRoleInsertCacheMut       sync.RWMutex
	staffRoleInsertCache          = make(map[string]insertCache)
	staffRoleUpdateCacheMut       sync.RWMutex
	staffRoleUpdateCache          = make(map[string]updateCache)
	staffRoleUpsertCacheMut       sync.RWMutex
	staffRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single staffRole record from the query using the global executor.
func (q staffRoleQuery) OneG(ctx context.Context) (*StaffRole, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single staffRole record from the query using the global executor, and panics on error.
func (q staffRoleQuery) OneGP(ctx context.Context) *StaffRole {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single staffRole record from the query, and panics on error.
func (q staffRoleQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *StaffRole {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single staffRole record from the query.
func (q staffRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StaffRole, error) {
	o := &StaffRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for staff_roles")
	}

	return o, nil
}

// AllG returns all StaffRole records from the query using the global executor.
func (q staffRoleQuery) AllG(ctx context.Context) (StaffRoleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all StaffRole records from the query using the global executor, and panics on error.
func (q staffRoleQuery) AllGP(ctx context.Context) StaffRoleSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all StaffRole records from the query, and panics on error.
func (q staffRoleQuery) AllP(ctx context.Context, exec boil.ContextExecutor) StaffRoleSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all StaffRole records from the query.
func (q staffRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffRoleSlice, error) {
	var o []*StaffRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to StaffRole slice")
	}

	return o, nil
}

// CountG returns the count of all StaffRole records in the query using the global executor
func (q staffRoleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all StaffRole records in the query using the global executor, and panics on error.
func (q staffRoleQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all StaffRole records in the query, and panics on error.
func (q staffRoleQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all StaffRole records in the query.
func (q staffRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count staff_roles rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q staffRoleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q staffRoleQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q staffRoleQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q staffRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if staff_roles exists")
	}

	return count > 0, nil
}

// RoleStaffs retrieves all the staff's Staffs with an executor via role column.
func (o *StaffRole) RoleStaffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`staffs`.`role`=?", o.ID),
	)

	return Staffs(queryMods...)
}

// LoadRoleStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffRoleL) LoadRoleStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaffRole interface{}, mods queries.Applicator) error {
	var slice []*StaffRole
	var object *StaffRole

	if singular {
		var ok bool
		object, ok = maybeStaffRole.(*StaffRole)
		if !ok {
			object = new(StaffRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaffRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaffRole))
			}
		}
	} else {
		s, ok := maybeStaffRole.(*[]*StaffRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaffRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaffRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffRoleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffRoleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.role in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staffs")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staffs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if singular {
		object.R.RoleStaffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.RoleStaffRole = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Role {
				local.R.RoleStaffs = append(local.R.RoleStaffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.RoleStaffRole = local
				break
			}
		}
	}

	return nil
}

// AddRoleStaffsG adds the given related objects to the existing relationships
// of the staff_role, optionally inserting them as new records.
// Appends related to o.R.RoleStaffs.
// Sets related.R.RoleStaffRole appropriately.
// Uses the global database handle.
func (o *StaffRole) AddRoleStaffsG(ctx context.Context, insert bool, related ...*Staff) error {
	return o.AddRoleStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoleStaffsP adds the given related objects to the existing relationships
// of the staff_role, optionally inserting them as new records.
// Appends related to o.R.RoleStaffs.
// Sets related.R.RoleStaffRole appropriately.
// Panics on error.
func (o *StaffRole) AddRoleStaffsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) {
	if err := o.AddRoleStaffs(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleStaffsGP adds the given related objects to the existing relationships
// of the staff_role, optionally inserting them as new records.
// Appends related to o.R.RoleStaffs.
// Sets related.R.RoleStaffRole appropriately.
// Uses the global database handle and panics on error.
func (o *StaffRole) AddRoleStaffsGP(ctx context.Context, insert bool, related ...*Staff) {
	if err := o.AddRoleStaffs(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoleStaffs adds the given related objects to the existing relationships
// of the staff_role, optionally inserting them as new records.
// Appends related to o.R.RoleStaffs.
// Sets related.R.RoleStaffRole appropriately.
func (o *StaffRole) AddRoleStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Role = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `staffs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"role"}),
				strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Role = o.ID
		}
	}

	if o.R == nil {
		o.R = &staffRoleR{
			RoleStaffs: related,
		}
	} else {
		o.R.RoleStaffs = append(o.R.RoleStaffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				RoleStaffRole: o,
			}
		} else {
			rel.R.RoleStaffRole = o
		}
	}
	return nil
}

// StaffRoles retrieves all the records using an executor.
func StaffRoles(mods ...qm.QueryMod) staffRoleQuery {
	mods = append(mods, qm.From("`staff_roles`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`staff_roles`.*"})
	}

	return staffRoleQuery{q}
}

// FindStaffRoleG retrieves a single record by ID.
func FindStaffRoleG(ctx context.Context, iD string, selectCols ...string) (*StaffRole, error) {
	return FindStaffRole(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindStaffRoleP retrieves a single record by ID with an executor, and panics on error.
func FindStaffRoleP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *StaffRole {
	retobj, err := FindStaffRole(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStaffRoleGP retrieves a single record by ID, and panics on error.
func FindStaffRoleGP(ctx context.Context, iD string, selectCols ...string) *StaffRole {
	retobj, err := FindStaffRole(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStaffRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaffRole(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StaffRole, error) {
	staffRoleObj := &StaffRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `staff_roles` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, staffRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from staff_roles")
	}

	return staffRoleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *StaffRole) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *StaffRole) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *StaffRole) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaffRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no staff_roles provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(staffRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffRoleInsertCacheMut.RLock()
	cache, cached := staffRoleInsertCache[key]
	staffRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffRoleAllColumns,
			staffRoleColumnsWithDefault,
			staffRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffRoleType, staffRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffRoleType, staffRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `staff_roles` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `staff_roles` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `staff_roles` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staffRolePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into staff_roles")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for staff_roles")
	}

CacheNoHooks:
	if !cached {
		staffRoleInsertCacheMut.Lock()
		staffRoleInsertCache[key] = cache
		staffRoleInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single StaffRole record using the global executor.
// See Update for more documentation.
func (o *StaffRole) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the StaffRole, and panics on error.
// See Update for more documentation.
func (o *StaffRole) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single StaffRole record using the global executor. Panics on error.
// See Update for more documentation.
func (o *StaffRole) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the StaffRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaffRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	staffRoleUpdateCacheMut.RLock()
	cache, cached := staffRoleUpdateCache[key]
	staffRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffRoleAllColumns,
			staffRolePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update staff_roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `staff_roles` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staffRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffRoleType, staffRoleMapping, append(wl, staffRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update staff_roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for staff_roles")
	}

	if !cached {
		staffRoleUpdateCacheMut.Lock()
		staffRoleUpdateCache[key] = cache
		staffRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q staffRoleQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q staffRoleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q staffRoleQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q staffRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for staff_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for staff_roles")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StaffRoleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StaffRoleSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StaffRoleSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `staff_roles` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in staffRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all staffRole")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *StaffRole) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *StaffRole) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *StaffRole) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLStaffRoleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaffRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no staff_roles provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(staffRoleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStaffRoleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffRoleUpsertCacheMut.RLock()
	cache, cached := staffRoleUpsertCache[key]
	staffRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffRoleAllColumns,
			staffRoleColumnsWithDefault,
			staffRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staffRoleAllColumns,
			staffRolePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert staff_roles, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`staff_roles`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `staff_roles` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(staffRoleType, staffRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffRoleType, staffRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert for staff_roles")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(staffRoleType, staffRoleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to retrieve unique values for staff_roles")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for staff_roles")
	}

CacheNoHooks:
	if !cached {
		staffRoleUpsertCacheMut.Lock()
		staffRoleUpsertCache[key] = cache
		staffRoleUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single StaffRole record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *StaffRole) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single StaffRole record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *StaffRole) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single StaffRole record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *StaffRole) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single StaffRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaffRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no StaffRole provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffRolePrimaryKeyMapping)
	sql := "DELETE FROM `staff_roles` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from staff_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for staff_roles")
	}

	return rowsAff, nil
}

func (q staffRoleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q staffRoleQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q staffRoleQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q staffRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no staffRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from staff_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for staff_roles")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StaffRoleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StaffRoleSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StaffRoleSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `staff_roles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from staffRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for staff_roles")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *StaffRole) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: no StaffRole provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *StaffRole) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *StaffRole) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaffRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaffRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffRoleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: empty StaffRoleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffRoleSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffRoleSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `staff_roles`.* FROM `staff_roles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in StaffRoleSlice")
	}

	*o = slice

	return nil
}

// StaffRoleExistsG checks if the StaffRole row exists.
func StaffRoleExistsG(ctx context.Context, iD string) (bool, error) {
	return StaffRoleExists(ctx, boil.GetContextDB(), iD)
}

// StaffRoleExistsP checks if the StaffRole row exists. Panics on error.
func StaffRoleExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := StaffRoleExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StaffRoleExistsGP checks if the StaffRole row exists. Panics on error.
func StaffRoleExistsGP(ctx context.Context, iD string) bool {
	e, err := StaffRoleExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StaffRoleExists checks if the StaffRole row exists.
func StaffRoleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `staff_roles` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if staff_roles exists")
	}

	return exists, nil
}

// Exists checks if the StaffRole row exists.
func (o *StaffRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StaffRoleExists(ctx, exec, o.ID)
}

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o StaffRoleSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			staffRoleAllColumns,
			staffRoleColumnsWithDefault,
			staffRoleColumnsWithoutDefault,
			queries.NonZeroDefaultSet(staffRoleColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
		if len(wlCols) == len(staffRoleAllColumns) {
			break
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range staffRoleAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {

		if i == 0 {
			sql = "INSERT INTO `staff_roles` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(staffRoleType, staffRoleMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to insert all from staffRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by insertall for staff_roles")
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o StaffRoleSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, boil.None(), columns)
}

// UpsertAll inserts or updates all rows.
// Currently it doesn't support "NoContext" and "NoRowsAffected".
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values.
// IMPORTANT: any AUTO_INCREMENT column should be excluded from `updateColumns` and `insertColumns` including PK.
func (o StaffRoleSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	return o.upsertAllOnConflictColumns(ctx, exec, nil, updateColumns, insertColumns)
}

// upsertAllOnConflictColumns upserts multiple rows with passing custom conflict columns to allow bypassing
// single column conflict check (see bug https://github.com/aarondl/sqlboiler/issues/328).
// SQLBoiler only checks column conflict on single column only which is not correct as MySQL PK or UNIQUE index
// can include multiple columns.
// This function allows passing multiple conflict columns, but it cannot check whether they are correct or not.
// So use it at your own risk.
func (o StaffRoleSlice) UpsertAllOnConflictColumns(ctx context.Context, exec boil.ContextExecutor, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	return o.upsertAllOnConflictColumns(ctx, exec, conflictColumns, updateColumns, insertColumns)
}

func (o StaffRoleSlice) upsertAllOnConflictColumns(ctx context.Context, exec boil.ContextExecutor, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	checkNZUniques := len(conflictColumns) == 0
	if len(conflictColumns) > 0 {
		mapConflictColumns := make(map[string]struct{}, len(conflictColumns))
		for _, col := range conflictColumns {
			for _, existCol := range staffRoleAllColumns {
				if col == existCol {
					mapConflictColumns[col] = struct{}{}
					break
				}
			}
		}
		if len(mapConflictColumns) <= 1 {
			return 0, errors.New("custom conflict columns must be 2 columns or more")
		}
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		if checkNZUniques {
			nzUniques := queries.NonZeroDefaultSet(mySQLStaffRoleUniqueColumns, row)
			if len(nzUniques) == 0 {
				return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
			}
		}
		insert, _ := insertColumns.InsertColumnSet(
			staffRoleAllColumns,
			staffRoleColumnsWithDefault,
			staffRoleColumnsWithoutDefault,
			queries.NonZeroDefaultSet(staffRoleColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
		if len(insertCols) == len(staffRoleAllColumns) || (insertColumns.IsWhitelist() && len(insertCols) == len(insertColumns.Cols)) {
			break
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range staffRoleAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		staffRoleAllColumns,
		staffRolePrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("dbmodel: unable to upsert staff_roles, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `staff_roles`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `staff_roles`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(staffRoleType, staffRoleMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to upsert for staff_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by upsert for staff_roles")
	}

	return rowsAff, nil
}
