// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tenant is an object representing the database table.
type Tenant struct { // id
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// name
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// created date
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// update date
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var TenantTableColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "tenants.id",
	Name:      "tenants.name",
	CreatedAt: "tenants.created_at",
	UpdatedAt: "tenants.updated_at",
}

// Generated where

var TenantWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "`tenants`.`id`"},
	Name:      whereHelperstring{field: "`tenants`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`tenants`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`tenants`.`updated_at`"},
}

// TenantRels is where relationship names are stored.
var TenantRels = struct {
	Staffs string
}{
	Staffs: "Staffs",
}

// tenantR is where relationships are stored.
type tenantR struct {
	Staffs StaffSlice `boil:"Staffs" json:"Staffs" toml:"Staffs" yaml:"Staffs"`
}

// NewStruct creates a new relationship struct
func (*tenantR) NewStruct() *tenantR {
	return &tenantR{}
}

func (r *tenantR) GetStaffs() StaffSlice {
	if r == nil {
		return nil
	}
	return r.Staffs
}

// tenantL is where Load methods for each relationship are stored.
type tenantL struct{}

var (
	tenantAllColumns            = []string{"id", "name", "created_at", "updated_at"}
	tenantColumnsWithoutDefault = []string{"id", "name", "created_at", "updated_at"}
	tenantColumnsWithDefault    = []string{}
	tenantPrimaryKeyColumns     = []string{"id"}
	tenantGeneratedColumns      = []string{}
)

type (
	// TenantSlice is an alias for a slice of pointers to Tenant.
	// This should almost always be used instead of []Tenant.
	TenantSlice []*Tenant
	// TenantHook is the signature for custom Tenant hook methods
	TenantHook func(context.Context, boil.ContextExecutor, *Tenant) error

	tenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantType                 = reflect.TypeOf(&Tenant{})
	tenantMapping              = queries.MakeStructMapping(tenantType)
	tenantPrimaryKeyMapping, _ = queries.BindMapping(tenantType, tenantMapping, tenantPrimaryKeyColumns)
	tenantInsertCacheMut       sync.RWMutex
	tenantInsertCache          = make(map[string]insertCache)
	tenantUpdateCacheMut       sync.RWMutex
	tenantUpdateCache          = make(map[string]updateCache)
	tenantUpsertCacheMut       sync.RWMutex
	tenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantAfterSelectHooks []TenantHook

var tenantBeforeInsertHooks []TenantHook
var tenantAfterInsertHooks []TenantHook

var tenantBeforeUpdateHooks []TenantHook
var tenantAfterUpdateHooks []TenantHook

var tenantBeforeDeleteHooks []TenantHook
var tenantAfterDeleteHooks []TenantHook

var tenantBeforeUpsertHooks []TenantHook
var tenantAfterUpsertHooks []TenantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tenant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tenant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tenant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tenant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tenant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tenant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tenant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tenant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tenant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantHook registers your hook function for all future operations.
func AddTenantHook(hookPoint boil.HookPoint, tenantHook TenantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantAfterSelectHooks = append(tenantAfterSelectHooks, tenantHook)
	case boil.BeforeInsertHook:
		tenantBeforeInsertHooks = append(tenantBeforeInsertHooks, tenantHook)
	case boil.AfterInsertHook:
		tenantAfterInsertHooks = append(tenantAfterInsertHooks, tenantHook)
	case boil.BeforeUpdateHook:
		tenantBeforeUpdateHooks = append(tenantBeforeUpdateHooks, tenantHook)
	case boil.AfterUpdateHook:
		tenantAfterUpdateHooks = append(tenantAfterUpdateHooks, tenantHook)
	case boil.BeforeDeleteHook:
		tenantBeforeDeleteHooks = append(tenantBeforeDeleteHooks, tenantHook)
	case boil.AfterDeleteHook:
		tenantAfterDeleteHooks = append(tenantAfterDeleteHooks, tenantHook)
	case boil.BeforeUpsertHook:
		tenantBeforeUpsertHooks = append(tenantBeforeUpsertHooks, tenantHook)
	case boil.AfterUpsertHook:
		tenantAfterUpsertHooks = append(tenantAfterUpsertHooks, tenantHook)
	}
}

// OneG returns a single tenant record from the query using the global executor.
func (q tenantQuery) OneG(ctx context.Context) (*Tenant, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single tenant record from the query using the global executor, and panics on error.
func (q tenantQuery) OneGP(ctx context.Context) *Tenant {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single tenant record from the query, and panics on error.
func (q tenantQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Tenant {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tenant record from the query.
func (q tenantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tenant, error) {
	o := &Tenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for tenants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Tenant records from the query using the global executor.
func (q tenantQuery) AllG(ctx context.Context) (TenantSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Tenant records from the query using the global executor, and panics on error.
func (q tenantQuery) AllGP(ctx context.Context) TenantSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Tenant records from the query, and panics on error.
func (q tenantQuery) AllP(ctx context.Context, exec boil.ContextExecutor) TenantSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tenant records from the query.
func (q tenantQuery) All(ctx context.Context, exec boil.ContextExecutor) (TenantSlice, error) {
	var o []*Tenant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Tenant slice")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Tenant records in the query using the global executor
func (q tenantQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Tenant records in the query using the global executor, and panics on error.
func (q tenantQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Tenant records in the query, and panics on error.
func (q tenantQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tenant records in the query.
func (q tenantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count tenants rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q tenantQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q tenantQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tenantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if tenants exists")
	}

	return count > 0, nil
}

// Staffs retrieves all the staff's Staffs with an executor.
func (o *Tenant) Staffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`staffs`.`tenant_id`=?", o.ID),
	)

	return Staffs(queryMods...)
}

// LoadStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.tenant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staffs")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staffs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Staffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Staffs = append(local.R.Staffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// AddStaffsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddStaffsG(ctx context.Context, insert bool, related ...*Staff) error {
	return o.AddStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// AddStaffsP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Tenant appropriately.
// Panics on error.
func (o *Tenant) AddStaffsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) {
	if err := o.AddStaffs(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffsGP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Tenant appropriately.
// Uses the global database handle and panics on error.
func (o *Tenant) AddStaffsGP(ctx context.Context, insert bool, related ...*Staff) {
	if err := o.AddStaffs(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffs adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `staffs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"tenant_id"}),
				strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Staffs: related,
		}
	} else {
		o.R.Staffs = append(o.R.Staffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// Tenants retrieves all the records using an executor.
func Tenants(mods ...qm.QueryMod) tenantQuery {
	mods = append(mods, qm.From("`tenants`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tenants`.*"})
	}

	return tenantQuery{q}
}

// FindTenantG retrieves a single record by ID.
func FindTenantG(ctx context.Context, iD string, selectCols ...string) (*Tenant, error) {
	return FindTenant(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTenantP retrieves a single record by ID with an executor, and panics on error.
func FindTenantP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *Tenant {
	retobj, err := FindTenant(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTenantGP retrieves a single record by ID, and panics on error.
func FindTenantGP(ctx context.Context, iD string, selectCols ...string) *Tenant {
	retobj, err := FindTenant(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Tenant, error) {
	tenantObj := &Tenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tenants` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tenantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from tenants")
	}

	if err = tenantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tenantObj, err
	}

	return tenantObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tenant) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tenant) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tenant) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tenant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no tenants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantInsertCacheMut.RLock()
	cache, cached := tenantInsertCache[key]
	tenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tenants` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tenants` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tenants` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tenantPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into tenants")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for tenants")
	}

CacheNoHooks:
	if !cached {
		tenantInsertCacheMut.Lock()
		tenantInsertCache[key] = cache
		tenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Tenant record using the global executor.
// See Update for more documentation.
func (o *Tenant) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Tenant, and panics on error.
// See Update for more documentation.
func (o *Tenant) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Tenant record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Tenant) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Tenant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tenant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantUpdateCacheMut.RLock()
	cache, cached := tenantUpdateCache[key]
	tenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tenants` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update tenants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for tenants")
	}

	if !cached {
		tenantUpdateCacheMut.Lock()
		tenantUpdateCache[key] = cache
		tenantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tenantQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q tenantQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q tenantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for tenants")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TenantSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TenantSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tenants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tenantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all tenant")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Tenant record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tenant) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Tenant record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tenant) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Tenant record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tenant) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Tenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tenant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Tenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPrimaryKeyMapping)
	sql := "DELETE FROM `tenants` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for tenants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q tenantQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q tenantQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q tenantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no tenantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for tenants")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TenantSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TenantSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tenants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tenantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for tenants")
	}

	if len(tenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tenant) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: no Tenant provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tenant) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tenant) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tenant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTenant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: empty TenantSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TenantSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TenantSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tenants`.* FROM `tenants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tenantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in TenantSlice")
	}

	*o = slice

	return nil
}

// TenantExistsG checks if the Tenant row exists.
func TenantExistsG(ctx context.Context, iD string) (bool, error) {
	return TenantExists(ctx, boil.GetContextDB(), iD)
}

// TenantExistsP checks if the Tenant row exists. Panics on error.
func TenantExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := TenantExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TenantExistsGP checks if the Tenant row exists. Panics on error.
func TenantExistsGP(ctx context.Context, iD string) bool {
	e, err := TenantExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TenantExists checks if the Tenant row exists.
func TenantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tenants` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if tenants exists")
	}

	return exists, nil
}

// Exists checks if the Tenant row exists.
func (o *Tenant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TenantExists(ctx, exec, o.ID)
}
