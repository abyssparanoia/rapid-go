// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	// id
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// tenant_id
	TenantID string `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	// role
	Role string `boil:"role" json:"role" toml:"role" yaml:"role"`
	// auth_uid
	AuthUID string `boil:"auth_uid" json:"auth_uid" toml:"auth_uid" yaml:"auth_uid"`
	// display_name
	DisplayName string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	// image_path
	ImagePath string `boil:"image_path" json:"image_path" toml:"image_path" yaml:"image_path"`
	// email
	Email string `boil:"email" json:"email" toml:"email" yaml:"email"`
	// created date
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// update date
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	ID          string
	TenantID    string
	Role        string
	AuthUID     string
	DisplayName string
	ImagePath   string
	Email       string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	TenantID:    "tenant_id",
	Role:        "role",
	AuthUID:     "auth_uid",
	DisplayName: "display_name",
	ImagePath:   "image_path",
	Email:       "email",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var StaffTableColumns = struct {
	ID          string
	TenantID    string
	Role        string
	AuthUID     string
	DisplayName string
	ImagePath   string
	Email       string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "staffs.id",
	TenantID:    "staffs.tenant_id",
	Role:        "staffs.role",
	AuthUID:     "staffs.auth_uid",
	DisplayName: "staffs.display_name",
	ImagePath:   "staffs.image_path",
	Email:       "staffs.email",
	CreatedAt:   "staffs.created_at",
	UpdatedAt:   "staffs.updated_at",
}

// Generated where

var StaffWhere = struct {
	ID          whereHelperstring
	TenantID    whereHelperstring
	Role        whereHelperstring
	AuthUID     whereHelperstring
	DisplayName whereHelperstring
	ImagePath   whereHelperstring
	Email       whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "`staffs`.`id`"},
	TenantID:    whereHelperstring{field: "`staffs`.`tenant_id`"},
	Role:        whereHelperstring{field: "`staffs`.`role`"},
	AuthUID:     whereHelperstring{field: "`staffs`.`auth_uid`"},
	DisplayName: whereHelperstring{field: "`staffs`.`display_name`"},
	ImagePath:   whereHelperstring{field: "`staffs`.`image_path`"},
	Email:       whereHelperstring{field: "`staffs`.`email`"},
	CreatedAt:   whereHelpertime_Time{field: "`staffs`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`staffs`.`updated_at`"},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	RoleStaffRole string
	Tenant        string
}{
	RoleStaffRole: "RoleStaffRole",
	Tenant:        "Tenant",
}

// staffR is where relationships are stored.
type staffR struct {
	RoleStaffRole *StaffRole `boil:"RoleStaffRole" json:"RoleStaffRole" toml:"RoleStaffRole" yaml:"RoleStaffRole"`
	Tenant        *Tenant    `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

func (o *Staff) GetRoleStaffRole() *StaffRole {
	if o == nil {
		return nil
	}

	return o.R.GetRoleStaffRole()
}

func (r *staffR) GetRoleStaffRole() *StaffRole {
	if r == nil {
		return nil
	}

	return r.RoleStaffRole
}

func (o *Staff) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *staffR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"id", "tenant_id", "role", "auth_uid", "display_name", "image_path", "email", "created_at", "updated_at"}
	staffColumnsWithoutDefault = []string{"id", "tenant_id", "role", "auth_uid", "display_name", "image_path", "email", "created_at", "updated_at"}
	staffColumnsWithDefault    = []string{}
	staffPrimaryKeyColumns     = []string{"id"}
	staffGeneratedColumns      = []string{}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single staff record from the query using the global executor.
func (q staffQuery) OneG(ctx context.Context) (*Staff, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single staff record from the query using the global executor, and panics on error.
func (q staffQuery) OneGP(ctx context.Context) *Staff {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single staff record from the query, and panics on error.
func (q staffQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Staff {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for staffs")
	}

	return o, nil
}

// AllG returns all Staff records from the query using the global executor.
func (q staffQuery) AllG(ctx context.Context) (StaffSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Staff records from the query using the global executor, and panics on error.
func (q staffQuery) AllGP(ctx context.Context) StaffSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Staff records from the query, and panics on error.
func (q staffQuery) AllP(ctx context.Context, exec boil.ContextExecutor) StaffSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Staff slice")
	}

	return o, nil
}

// CountG returns the count of all Staff records in the query using the global executor
func (q staffQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Staff records in the query using the global executor, and panics on error.
func (q staffQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Staff records in the query, and panics on error.
func (q staffQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count staffs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q staffQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q staffQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q staffQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if staffs exists")
	}

	return count > 0, nil
}

// RoleStaffRole pointed to by the foreign key.
func (o *Staff) RoleStaffRole(mods ...qm.QueryMod) staffRoleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.Role),
	}

	queryMods = append(queryMods, mods...)

	return StaffRoles(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Staff) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadRoleStaffRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadRoleStaffRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.Role] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			args[obj.Role] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`staff_roles`),
		qm.WhereIn(`staff_roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StaffRole")
	}

	var resultSlice []*StaffRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StaffRole")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staff_roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staff_roles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleStaffRole = foreign
		if foreign.R == nil {
			foreign.R = &staffRoleR{}
		}
		foreign.R.RoleStaffs = append(foreign.R.RoleStaffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Role == foreign.ID {
				local.R.RoleStaffRole = foreign
				if foreign.R == nil {
					foreign.R = &staffRoleR{}
				}
				foreign.R.RoleStaffs = append(foreign.R.RoleStaffs, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Staffs = append(foreign.R.Staffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Staffs = append(foreign.R.Staffs, local)
				break
			}
		}
	}

	return nil
}

// SetRoleStaffRoleG of the staff to the related item.
// Sets o.R.RoleStaffRole to related.
// Adds o to related.R.RoleStaffs.
// Uses the global database handle.
func (o *Staff) SetRoleStaffRoleG(ctx context.Context, insert bool, related *StaffRole) error {
	return o.SetRoleStaffRole(ctx, boil.GetContextDB(), insert, related)
}

// SetRoleStaffRoleP of the staff to the related item.
// Sets o.R.RoleStaffRole to related.
// Adds o to related.R.RoleStaffs.
// Panics on error.
func (o *Staff) SetRoleStaffRoleP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StaffRole) {
	if err := o.SetRoleStaffRole(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleStaffRoleGP of the staff to the related item.
// Sets o.R.RoleStaffRole to related.
// Adds o to related.R.RoleStaffs.
// Uses the global database handle and panics on error.
func (o *Staff) SetRoleStaffRoleGP(ctx context.Context, insert bool, related *StaffRole) {
	if err := o.SetRoleStaffRole(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRoleStaffRole of the staff to the related item.
// Sets o.R.RoleStaffRole to related.
// Adds o to related.R.RoleStaffs.
func (o *Staff) SetRoleStaffRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StaffRole) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Role = related.ID
	if o.R == nil {
		o.R = &staffR{
			RoleStaffRole: related,
		}
	} else {
		o.R.RoleStaffRole = related
	}

	if related.R == nil {
		related.R = &staffRoleR{
			RoleStaffs: StaffSlice{o},
		}
	} else {
		related.R.RoleStaffs = append(related.R.RoleStaffs, o)
	}

	return nil
}

// SetTenantG of the staff to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Staffs.
// Uses the global database handle.
func (o *Staff) SetTenantG(ctx context.Context, insert bool, related *Tenant) error {
	return o.SetTenant(ctx, boil.GetContextDB(), insert, related)
}

// SetTenantP of the staff to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Staffs.
// Panics on error.
func (o *Staff) SetTenantP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) {
	if err := o.SetTenant(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTenantGP of the staff to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Staffs.
// Uses the global database handle and panics on error.
func (o *Staff) SetTenantGP(ctx context.Context, insert bool, related *Tenant) {
	if err := o.SetTenant(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTenant of the staff to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tenant_id"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &staffR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("`staffs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`staffs`.*"})
	}

	return staffQuery{q}
}

// FindStaffG retrieves a single record by ID.
func FindStaffG(ctx context.Context, iD string, selectCols ...string) (*Staff, error) {
	return FindStaff(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindStaffP retrieves a single record by ID with an executor, and panics on error.
func FindStaffP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *Staff {
	retobj, err := FindStaff(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStaffGP retrieves a single record by ID, and panics on error.
func FindStaffGP(ctx context.Context, iD string, selectCols ...string) *Staff {
	retobj, err := FindStaff(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `staffs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from staffs")
	}

	return staffObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Staff) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Staff) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Staff) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no staffs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `staffs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `staffs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `staffs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into staffs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for staffs")
	}

CacheNoHooks:
	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Staff record using the global executor.
// See Update for more documentation.
func (o *Staff) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Staff, and panics on error.
// See Update for more documentation.
func (o *Staff) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Staff record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Staff) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `staffs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for staffs")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q staffQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q staffQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q staffQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for staffs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StaffSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StaffSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StaffSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Staff) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Staff) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Staff) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLStaffUniqueColumns = []string{
	"id",
	"auth_uid",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no staffs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStaffUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert staffs, could not build update column list")
		}

		ret := strmangle.SetComplement(staffAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`staffs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `staffs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert for staffs")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(staffType, staffMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to retrieve unique values for staffs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for staffs")
	}

CacheNoHooks:
	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Staff record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Staff) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Staff record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Staff) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Staff record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Staff) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Staff provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM `staffs` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for staffs")
	}

	return rowsAff, nil
}

func (q staffQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q staffQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q staffQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StaffSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StaffSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StaffSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Staff) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: no Staff provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Staff) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Staff) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: empty StaffSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `staffs`.* FROM `staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExistsG checks if the Staff row exists.
func StaffExistsG(ctx context.Context, iD string) (bool, error) {
	return StaffExists(ctx, boil.GetContextDB(), iD)
}

// StaffExistsP checks if the Staff row exists. Panics on error.
func StaffExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := StaffExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StaffExistsGP checks if the Staff row exists. Panics on error.
func StaffExistsGP(ctx context.Context, iD string) bool {
	e, err := StaffExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `staffs` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if staffs exists")
	}

	return exists, nil
}

// Exists checks if the Staff row exists.
func (o *Staff) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StaffExists(ctx, exec, o.ID)
}

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o StaffSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			queries.NonZeroDefaultSet(staffColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
		if len(wlCols) == len(staffAllColumns) {
			break
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range staffAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {

		if i == 0 {
			sql = "INSERT INTO `staffs` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to insert all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by insertall for staffs")
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o StaffSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, boil.None(), columns)
}

// UpsertAll inserts or updates all rows.
// Currently it doesn't support "NoContext" and "NoRowsAffected".
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values.
// IMPORTANT: any AUTO_INCREMENT column should be excluded from `updateColumns` and `insertColumns` including PK.
func (o StaffSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	return o.upsertAllOnConflictColumns(ctx, exec, nil, updateColumns, insertColumns)
}

// upsertAllOnConflictColumns upserts multiple rows with passing custom conflict columns to allow bypassing
// single column conflict check (see bug https://github.com/volatiletech/sqlboiler/issues/328).
// SQLBoiler only checks column conflict on single column only which is not correct as MySQL PK or UNIQUE index
// can include multiple columns.
// This function allows passing multiple conflict columns, but it cannot check whether they are correct or not.
// So use it at your own risk.
func (o StaffSlice) UpsertAllOnConflictColumns(ctx context.Context, exec boil.ContextExecutor, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	return o.upsertAllOnConflictColumns(ctx, exec, conflictColumns, updateColumns, insertColumns)
}

func (o StaffSlice) upsertAllOnConflictColumns(ctx context.Context, exec boil.ContextExecutor, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	checkNZUniques := len(conflictColumns) == 0
	if len(conflictColumns) > 0 {
		mapConflictColumns := make(map[string]struct{}, len(conflictColumns))
		for _, col := range conflictColumns {
			for _, existCol := range staffAllColumns {
				if col == existCol {
					mapConflictColumns[col] = struct{}{}
					break
				}
			}
		}
		if len(mapConflictColumns) <= 1 {
			return 0, errors.New("custom conflict columns must be 2 columns or more")
		}
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		if checkNZUniques {
			nzUniques := queries.NonZeroDefaultSet(mySQLStaffUniqueColumns, row)
			if len(nzUniques) == 0 {
				return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
			}
		}
		insert, _ := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			queries.NonZeroDefaultSet(staffColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
		if len(insertCols) == len(staffAllColumns) || (insertColumns.IsWhitelist() && len(insertCols) == len(insertColumns.Cols)) {
			break
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range staffAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		staffAllColumns,
		staffPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("dbmodel: unable to upsert staffs, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `staffs`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `staffs`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(staffType, staffMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to upsert for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by upsert for staffs")
	}

	return rowsAff, nil
}
