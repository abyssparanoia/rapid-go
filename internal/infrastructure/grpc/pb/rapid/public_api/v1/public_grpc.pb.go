// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public_apiv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicV1ServiceClient is the client API for PublicV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicV1ServiceClient interface {
	PublicDeepHealthCheck(ctx context.Context, in *PublicDeepHealthCheckRequest, opts ...grpc.CallOption) (*PublicDeepHealthCheckResponse, error)
	PublicGetTenant(ctx context.Context, in *PublicGetTenantRequest, opts ...grpc.CallOption) (*PublicGetTenantResponse, error)
}

type publicV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicV1ServiceClient(cc grpc.ClientConnInterface) PublicV1ServiceClient {
	return &publicV1ServiceClient{cc}
}

func (c *publicV1ServiceClient) PublicDeepHealthCheck(ctx context.Context, in *PublicDeepHealthCheckRequest, opts ...grpc.CallOption) (*PublicDeepHealthCheckResponse, error) {
	out := new(PublicDeepHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/rapid.public_api.v1.PublicV1Service/PublicDeepHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicV1ServiceClient) PublicGetTenant(ctx context.Context, in *PublicGetTenantRequest, opts ...grpc.CallOption) (*PublicGetTenantResponse, error) {
	out := new(PublicGetTenantResponse)
	err := c.cc.Invoke(ctx, "/rapid.public_api.v1.PublicV1Service/PublicGetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicV1ServiceServer is the server API for PublicV1Service service.
// All implementations should embed UnimplementedPublicV1ServiceServer
// for forward compatibility
type PublicV1ServiceServer interface {
	PublicDeepHealthCheck(context.Context, *PublicDeepHealthCheckRequest) (*PublicDeepHealthCheckResponse, error)
	PublicGetTenant(context.Context, *PublicGetTenantRequest) (*PublicGetTenantResponse, error)
}

// UnimplementedPublicV1ServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicV1ServiceServer struct {
}

func (UnimplementedPublicV1ServiceServer) PublicDeepHealthCheck(context.Context, *PublicDeepHealthCheckRequest) (*PublicDeepHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicDeepHealthCheck not implemented")
}
func (UnimplementedPublicV1ServiceServer) PublicGetTenant(context.Context, *PublicGetTenantRequest) (*PublicGetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicGetTenant not implemented")
}

// UnsafePublicV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicV1ServiceServer will
// result in compilation errors.
type UnsafePublicV1ServiceServer interface {
	mustEmbedUnimplementedPublicV1ServiceServer()
}

func RegisterPublicV1ServiceServer(s grpc.ServiceRegistrar, srv PublicV1ServiceServer) {
	s.RegisterService(&PublicV1Service_ServiceDesc, srv)
}

func _PublicV1Service_PublicDeepHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDeepHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicV1ServiceServer).PublicDeepHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.public_api.v1.PublicV1Service/PublicDeepHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicV1ServiceServer).PublicDeepHealthCheck(ctx, req.(*PublicDeepHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicV1Service_PublicGetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicGetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicV1ServiceServer).PublicGetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.public_api.v1.PublicV1Service/PublicGetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicV1ServiceServer).PublicGetTenant(ctx, req.(*PublicGetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicV1Service_ServiceDesc is the grpc.ServiceDesc for PublicV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rapid.public_api.v1.PublicV1Service",
	HandlerType: (*PublicV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicDeepHealthCheck",
			Handler:    _PublicV1Service_PublicDeepHealthCheck_Handler,
		},
		{
			MethodName: "PublicGetTenant",
			Handler:    _PublicV1Service_PublicGetTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rapid/public_api/v1/public.proto",
}
