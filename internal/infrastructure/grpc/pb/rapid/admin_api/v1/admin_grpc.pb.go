// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admin_apiv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminV1ServiceClient is the client API for AdminV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminV1ServiceClient interface {
	AdminCreateAssetPresignedURL(ctx context.Context, in *AdminCreateAssetPresignedURLRequest, opts ...grpc.CallOption) (*AdminCreateAssetPresignedURLResponse, error)
	AdminGetTenant(ctx context.Context, in *AdminGetTenantRequest, opts ...grpc.CallOption) (*AdminGetTenantResponse, error)
	AdminListTenants(ctx context.Context, in *AdminListTenantsRequest, opts ...grpc.CallOption) (*AdminListTenantsResponse, error)
	AdminCreateTenant(ctx context.Context, in *AdminCreateTenantRequest, opts ...grpc.CallOption) (*AdminCreateTenantResponse, error)
	AdminUpdateTenant(ctx context.Context, in *AdminUpdateTenantRequest, opts ...grpc.CallOption) (*AdminUpdateTenantResponse, error)
	AdminDeleteTenant(ctx context.Context, in *AdminDeleteTenantRequest, opts ...grpc.CallOption) (*AdminDeleteTenantResponse, error)
	AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...grpc.CallOption) (*AdminCreateUserResponse, error)
}

type adminV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminV1ServiceClient(cc grpc.ClientConnInterface) AdminV1ServiceClient {
	return &adminV1ServiceClient{cc}
}

func (c *adminV1ServiceClient) AdminCreateAssetPresignedURL(ctx context.Context, in *AdminCreateAssetPresignedURLRequest, opts ...grpc.CallOption) (*AdminCreateAssetPresignedURLResponse, error) {
	out := new(AdminCreateAssetPresignedURLResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminCreateAssetPresignedURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminGetTenant(ctx context.Context, in *AdminGetTenantRequest, opts ...grpc.CallOption) (*AdminGetTenantResponse, error) {
	out := new(AdminGetTenantResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminGetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminListTenants(ctx context.Context, in *AdminListTenantsRequest, opts ...grpc.CallOption) (*AdminListTenantsResponse, error) {
	out := new(AdminListTenantsResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminCreateTenant(ctx context.Context, in *AdminCreateTenantRequest, opts ...grpc.CallOption) (*AdminCreateTenantResponse, error) {
	out := new(AdminCreateTenantResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminCreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminUpdateTenant(ctx context.Context, in *AdminUpdateTenantRequest, opts ...grpc.CallOption) (*AdminUpdateTenantResponse, error) {
	out := new(AdminUpdateTenantResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminUpdateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminDeleteTenant(ctx context.Context, in *AdminDeleteTenantRequest, opts ...grpc.CallOption) (*AdminDeleteTenantResponse, error) {
	out := new(AdminDeleteTenantResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminDeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminV1ServiceClient) AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...grpc.CallOption) (*AdminCreateUserResponse, error) {
	out := new(AdminCreateUserResponse)
	err := c.cc.Invoke(ctx, "/rapid.admin_api.v1.AdminV1Service/AdminCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminV1ServiceServer is the server API for AdminV1Service service.
// All implementations should embed UnimplementedAdminV1ServiceServer
// for forward compatibility
type AdminV1ServiceServer interface {
	AdminCreateAssetPresignedURL(context.Context, *AdminCreateAssetPresignedURLRequest) (*AdminCreateAssetPresignedURLResponse, error)
	AdminGetTenant(context.Context, *AdminGetTenantRequest) (*AdminGetTenantResponse, error)
	AdminListTenants(context.Context, *AdminListTenantsRequest) (*AdminListTenantsResponse, error)
	AdminCreateTenant(context.Context, *AdminCreateTenantRequest) (*AdminCreateTenantResponse, error)
	AdminUpdateTenant(context.Context, *AdminUpdateTenantRequest) (*AdminUpdateTenantResponse, error)
	AdminDeleteTenant(context.Context, *AdminDeleteTenantRequest) (*AdminDeleteTenantResponse, error)
	AdminCreateUser(context.Context, *AdminCreateUserRequest) (*AdminCreateUserResponse, error)
}

// UnimplementedAdminV1ServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminV1ServiceServer struct {
}

func (UnimplementedAdminV1ServiceServer) AdminCreateAssetPresignedURL(context.Context, *AdminCreateAssetPresignedURLRequest) (*AdminCreateAssetPresignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAssetPresignedURL not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminGetTenant(context.Context, *AdminGetTenantRequest) (*AdminGetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetTenant not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminListTenants(context.Context, *AdminListTenantsRequest) (*AdminListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListTenants not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminCreateTenant(context.Context, *AdminCreateTenantRequest) (*AdminCreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateTenant not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminUpdateTenant(context.Context, *AdminUpdateTenantRequest) (*AdminUpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateTenant not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminDeleteTenant(context.Context, *AdminDeleteTenantRequest) (*AdminDeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteTenant not implemented")
}
func (UnimplementedAdminV1ServiceServer) AdminCreateUser(context.Context, *AdminCreateUserRequest) (*AdminCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateUser not implemented")
}

// UnsafeAdminV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminV1ServiceServer will
// result in compilation errors.
type UnsafeAdminV1ServiceServer interface {
	mustEmbedUnimplementedAdminV1ServiceServer()
}

func RegisterAdminV1ServiceServer(s grpc.ServiceRegistrar, srv AdminV1ServiceServer) {
	s.RegisterService(&AdminV1Service_ServiceDesc, srv)
}

func _AdminV1Service_AdminCreateAssetPresignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAssetPresignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminCreateAssetPresignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminCreateAssetPresignedURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminCreateAssetPresignedURL(ctx, req.(*AdminCreateAssetPresignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminGetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminGetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminGetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminGetTenant(ctx, req.(*AdminGetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminListTenants(ctx, req.(*AdminListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminCreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminCreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminCreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminCreateTenant(ctx, req.(*AdminCreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminUpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminUpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminUpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminUpdateTenant(ctx, req.(*AdminUpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminDeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminDeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminDeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminDeleteTenant(ctx, req.(*AdminDeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminV1Service_AdminCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminV1ServiceServer).AdminCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapid.admin_api.v1.AdminV1Service/AdminCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminV1ServiceServer).AdminCreateUser(ctx, req.(*AdminCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminV1Service_ServiceDesc is the grpc.ServiceDesc for AdminV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rapid.admin_api.v1.AdminV1Service",
	HandlerType: (*AdminV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateAssetPresignedURL",
			Handler:    _AdminV1Service_AdminCreateAssetPresignedURL_Handler,
		},
		{
			MethodName: "AdminGetTenant",
			Handler:    _AdminV1Service_AdminGetTenant_Handler,
		},
		{
			MethodName: "AdminListTenants",
			Handler:    _AdminV1Service_AdminListTenants_Handler,
		},
		{
			MethodName: "AdminCreateTenant",
			Handler:    _AdminV1Service_AdminCreateTenant_Handler,
		},
		{
			MethodName: "AdminUpdateTenant",
			Handler:    _AdminV1Service_AdminUpdateTenant_Handler,
		},
		{
			MethodName: "AdminDeleteTenant",
			Handler:    _AdminV1Service_AdminDeleteTenant_Handler,
		},
		{
			MethodName: "AdminCreateUser",
			Handler:    _AdminV1Service_AdminCreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rapid/admin_api/v1/admin.proto",
}
